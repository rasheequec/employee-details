{"version":3,"sources":["helpers/history.js","route/public-route.js","helpers/constants.js","services/authService.js","route/private-route.js","components/form.js","services/userService.js","actions/alertAction.js","actions/userAction.js","pages/signup/index.js","pages/login/index.js","pages/home/employeeList.js","actions/employeeAction.js","components/navbar.js","pages/home/index.js","components/alert.js","App.js","reducers/userReducer.js","reducers/employeeReducer.js","reducers/index.js","reducers/alertReducer.js","store/index.js","serviceWorker.js","index.js"],"names":["history","createBrowserHistory","PublicRoute","Component","component","rest","render","props","API_URL","userConstants","employeeConstants","alertConstants","AuthService","IsLoggedIn","localStorage","getItem","PrivateRoute","to","UserForm","title","inputFields","select","buttonText","changeHandle","submitHandle","isLoading","redirect","redirectTo","className","Form","onSubmit","map","data","Group","key","name","Label","label","Control","type","placeholder","onChange","as","options","opt","Button","variant","style","minWidth","Spinner","animation","size","onClick","userService","signup","requestOptions","method","headers","body","JSON","stringify","fetch","then","handleResponse","user","login","setItem","token","logout","clear","fetchEmployees","response","text","parse","ok","status","error","message","statusText","Promise","reject","alertActions","alertSuccess","alertError","alertClear","userActions","dispatch","success","push","failure","SignUp","useDispatch","useSelector","state","useState","email","password","designation","inputs","setInputs","e","target","value","preventDefault","alert","Login","List","searchText","employeeData","Table","striped","bordered","hover","i","employeeActions","fetchDetails","payload","NavBar","Navbar","expand","bg","Container","Brand","href","inline","Home","employeeReducer","employee","setEmployeeData","setSearchText","useEffect","employees","filter","toLowerCase","search","AlertMessage","alertReducer","Alert","setTimeout","App","exact","from","path","initialState","combineReducers","action","loggerMiddleware","createLogger","store","createStore","rootReducer","applyMiddleware","thunkMiddleware","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.9ebf8224.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history';\r\n\r\nexport const history = createBrowserHistory();","import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\n\r\nconst PublicRoute = ({ component: Component, ...rest }) => {\r\n    return (\r\n        <Route {...rest} render={props => (\r\n            <Component {...props} {...rest} />\r\n        )} />\r\n    );\r\n};\r\n\r\nexport default PublicRoute;","export const USER_TOKEN = \"USER_TOKEN\"\r\nexport const API_URL = \"http://localhost:8080\"\r\nexport const userConstants = {\r\n LOGIN_SUCCESS: 'LOGIN_SUCCESS',\r\n LOGIN_REQUEST: 'LOGIN_REQUEST',\r\n LOGIN_FAILURE: 'LOGIN_FAILURE',\r\n SIGNUP_SUCCESS: 'SIGNUP_SUCCESS',\r\n SIGNUP_REQUEST: 'SIGNUP_REQUEST',\r\n SIGNUP_FAILURE: 'SIGNUP_FAILURE'\r\n}\r\nexport const employeeConstants = {\r\n REQUEST: 'EMPLOYEE_REQUEST',\r\n SUCCESS: 'EMPLOYEE_SUCCESS',\r\n FAILURE: 'EMPLOYEE_FAILURE'\r\n}\r\nexport const alertConstants = {\r\nSUCCESS: 'ALERT_SUCCESS',\r\nERROR: 'ALERT_ERROR',\r\nCLEAR: 'ALERT_CLEAR'\r\n}","import { USER_TOKEN } from '../helpers/constants'\r\nconst IsLoggedIn = () => {\r\n  if (localStorage.getItem(USER_TOKEN)) {\r\n    return true;\r\n  } else {\r\n    return false\r\n  }\r\n};\r\n\r\nconst AuthService = { IsLoggedIn };\r\nexport default AuthService;","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport AuthService from '../services/authService';\r\n\r\nconst PrivateRoute = ({ component: Component, ...rest }) => {\r\n    return (\r\n        <Route {...rest} render={props => (\r\n            AuthService.IsLoggedIn() ?\r\n                <Component {...props} {...rest} />\r\n                : <Redirect to=\"/login\" />\r\n        )} />\r\n    );\r\n};\r\n\r\nexport default PrivateRoute;","import React from \"react\"\r\nimport { Button, Form, Spinner } from 'react-bootstrap';\r\n\r\nconst UserForm = ({ title, inputFields, select, buttonText, changeHandle, submitHandle, isLoading, redirect, redirectTo }) => {\r\n    return (\r\n        <div className=\"form\">\r\n            <Form className=\"form-wrap\" onSubmit={submitHandle}>\r\n                <h3 className=\"header\">{title}</h3>\r\n                {inputFields.map(data => {\r\n                    return (\r\n                        <Form.Group key={data.name}>\r\n                            <Form.Label>{data.label}</Form.Label>\r\n                            <Form.Control type={data.type} name={data.name} placeholder={data.placeholder} onChange={changeHandle} />\r\n                        </Form.Group>\r\n                    )\r\n                })}\r\n                {select.map(data => {\r\n                    return (\r\n                        <Form.Group key={data.name}>\r\n                            <Form.Label>{data.label}</Form.Label>\r\n                            <Form.Control as=\"select\" onChange={changeHandle} name={data.name}>\r\n                                {data.options.map(opt => <option key={opt}>{opt}</option>)}\r\n                            </Form.Control>\r\n                        </Form.Group>\r\n                    )\r\n                })}\r\n                <Button variant=\"primary\" type=\"submit\" style={{minWidth: '100px'}}>\r\n                    {isLoading ?<Spinner animation=\"border\" size=\"sm\"/> :\r\n                    buttonText\r\n                    }\r\n                </Button>\r\n                <p className=\"redirect\" onClick={redirectTo}>{redirect}</p>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserForm","import {API_URL, USER_TOKEN} from '../helpers/constants';\r\n\r\nexport const userService = {\r\n    signup,\r\n    login,\r\n    logout,\r\n    fetchEmployees\r\n};\r\n\r\nfunction signup(data) {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(data)\r\n    };\r\n\r\n    return fetch(`${API_URL}/register`, requestOptions)\r\n        .then(handleResponse)\r\n        .then(user => {\r\n            return user;\r\n        });\r\n}\r\n\r\nfunction login(data) {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(data)\r\n    };\r\n\r\n    return fetch(`${API_URL}/login`, requestOptions)\r\n        .then(\r\n            handleResponse)\r\n        .then(user => {\r\n            localStorage.setItem(USER_TOKEN, user.token)\r\n            return user;\r\n        });\r\n}\r\n\r\nfunction logout(data) {\r\n    const requestOptions = {\r\n        method: 'DELETE',\r\n        headers: { 'Content-Type': 'application/json', 'x-auth': localStorage.getItem(USER_TOKEN)},\r\n    };\r\n\r\n    return fetch(`${API_URL}/logout`, requestOptions)\r\n        .then(handleResponse)\r\n        .then(data => {\r\n            localStorage.clear()\r\n            return data;\r\n        });\r\n}\r\n\r\nfunction fetchEmployees() {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json', 'x-auth': localStorage.getItem(USER_TOKEN) },\r\n        body: JSON.stringify({})\r\n    };\r\n\r\n    return fetch(`${API_URL}/list`, requestOptions)\r\n        .then(handleResponse)\r\n        .then(user => {\r\n            return user;\r\n        });\r\n}\r\n\r\nfunction handleResponse(response) {\r\n    return response.text().then(text => {\r\n        const data = text && JSON.parse(text);\r\n        if (!response.ok) {\r\n            if (response.status === 401) {\r\n            }\r\n            const error = (data && data.message) || response.statusText;\r\n            return Promise.reject(error);\r\n        }\r\n        return data;\r\n    });\r\n}","import { alertConstants } from '../helpers/constants';\r\n\r\nexport const alertActions = {\r\n    alertSuccess,\r\n    alertError,\r\n    alertClear\r\n};\r\n\r\nfunction alertSuccess(message) { return { type: alertConstants.SUCCESS, message } }\r\nfunction alertError(message) { return { type: alertConstants.ERROR, message } }\r\nfunction alertClear() { return { type: alertConstants.CLEAR} }\r\n","import { userConstants } from '../helpers/constants';\r\nimport { userService } from '../services/userService';\r\nimport { alertActions } from './alertAction'\r\nimport { history } from '../helpers/history';\r\n\r\nexport const userActions = {\r\n    signup,\r\n    login,\r\n    logout\r\n};\r\n\r\nfunction signup(data) {\r\n    return dispatch => {\r\n        dispatch(request({ data }));\r\n        userService.signup(data)\r\n            .then(\r\n                user => {\r\n                    dispatch(success(user));\r\n                    dispatch(alertActions.alertSuccess('You have successfully registered. Please login to continue.'))\r\n                    history.push('login');\r\n                },\r\n                error => {\r\n                    dispatch(failure(error));\r\n                    dispatch(alertActions.alertError('Something went wrong. Please try again'));\r\n                }\r\n            );\r\n    };\r\n\r\n    function request(user) { return { type: userConstants.LOGIN_REQUEST, user } }\r\n    function success(user) { return { type: userConstants.LOGIN_SUCCESS, user } }\r\n    function failure(error) { return { type: userConstants.LOGIN_FAILURE, error } }\r\n}\r\n\r\nfunction login(data) {\r\n    return dispatch => {\r\n        dispatch(request({ data }));\r\n        userService.login(data)\r\n            .then(\r\n                user => {\r\n                    dispatch(success(user));\r\n                    dispatch(alertActions.alertSuccess('You have successfully logged in.'))\r\n                    history.push('home');\r\n                },\r\n                error => {\r\n                    dispatch(alertActions.alertError(error))\r\n                    dispatch(failure(error));\r\n                }\r\n            );\r\n    };\r\n\r\n    function request(user) { return { type: userConstants.LOGIN_REQUEST, user } }\r\n    function success(user) { return { type: userConstants.LOGIN_SUCCESS, user } }\r\n    function failure(error) { return { type: userConstants.LOGIN_FAILURE, error } }\r\n}\r\n\r\nfunction logout(data) {\r\n    return dispatch => {\r\n        userService.logout(data)\r\n            .then(\r\n                user => {\r\n                    dispatch(alertActions.alertSuccess('You have successfully logged out.'))\r\n                    history.push('login');\r\n                },\r\n                error => {\r\n                    dispatch(alertActions.alertError('Something went wrong. Please try again.'))\r\n                }\r\n            );\r\n    };\r\n}","import React, { useState } from 'react';\r\nimport UserForm from '../../components/form';\r\nimport { userActions } from '../../actions/userAction';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { history } from '../../helpers/history';\r\n\r\nconst SignUp = () => {\r\n    const dispatch = useDispatch();\r\n    const isLoading = useSelector(state => state.user.isLoading)\r\n    const [inputs, setInputs] = useState({\r\n        name: \"\",\r\n        email: \"\",\r\n        password: \"\",\r\n        designation: \"HR\"\r\n    })\r\n\r\n    const changeHandle = e => {\r\n        setInputs({ ...inputs, [e.target.name]: e.target.value })\r\n    }\r\n    const submitHandle = e => {\r\n        e.preventDefault()\r\n        if(inputs.name && inputs.email && inputs.password){\r\n        dispatch(userActions.signup(inputs))\r\n        }\r\n        else{\r\n         alert(\"No fields can be empty. Please fill and try again\")\r\n        }\r\n    }\r\n    const redirectTo = () => {\r\n        history.push('login')\r\n    }\r\n    return (\r\n        <UserForm\r\n            title=\"Register as Employee\"\r\n            inputFields={[\r\n                { type: \"text\", name: \"name\", placeholder: \"Enter name\", label: \"Name\" },\r\n                { type: \"email\", name: \"email\", placeholder: \"Enter email\", label: \"Email\" },\r\n                { type: \"password\", name: \"password\", placeholder: \"password\", label: \"Password\" }\r\n            ]}\r\n            select={[\r\n                {\r\n                    label: \"Choose designation\",\r\n                    name: \"designation\",\r\n                    options: [\"HR\", \"Software Engineer\", \"Team Lead\", \"Project Manager\"]\r\n                }\r\n            ]}\r\n            buttonText=\"Submit\"\r\n            changeHandle={changeHandle}\r\n            submitHandle={submitHandle}\r\n            isLoading={isLoading}\r\n            redirect = \"Already registered? login here\"\r\n            redirectTo={redirectTo}\r\n        />\r\n    )\r\n}\r\n\r\nexport default SignUp","import React, { useState } from 'react';\r\nimport UserForm from '../../components/form';\r\nimport { userActions } from '../../actions/userAction';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { history } from '../../helpers/history';\r\n\r\nconst Login = () => {\r\n    const dispatch = useDispatch();\r\n    const isLoading = useSelector(state => state.user.isLoading)\r\n    const [inputs, setInputs] = useState({\r\n        email: \"\",\r\n        password: \"\"\r\n    })\r\n\r\n    const changeHandle = e => {\r\n        setInputs({ ...inputs, [e.target.name]: e.target.value })\r\n    }\r\n    const submitHandle = e => {\r\n        e.preventDefault()\r\n        if(inputs.email && inputs.password){\r\n        dispatch(userActions.login(inputs))\r\n        }\r\n        else{\r\n            alert(\"No fields can be empty. Please fill and try again\")\r\n        }\r\n    }\r\n    const redirectTo = () => {\r\n        history.push('signup')\r\n    }\r\n    return (\r\n        <UserForm\r\n            title=\"Login as Employee\"\r\n            inputFields={[\r\n                { type: \"email\", name: \"email\", placeholder: \"Enter email\", label: \"Email\" },\r\n                { type: \"password\", name: \"password\", placeholder: \"password\", label: \"Password\" }\r\n            ]}\r\n            select={[]}\r\n            buttonText=\"Login\"\r\n            changeHandle={changeHandle}\r\n            submitHandle={submitHandle}\r\n            isLoading={isLoading}\r\n            redirect = \"New user? register here\"\r\n            redirectTo={redirectTo}\r\n        />\r\n    )\r\n}\r\n\r\nexport default Login","import React from 'react';\r\nimport { Table, Spinner } from 'react-bootstrap';\r\n\r\nconst List = ({searchText, changeHandle, employeeData, isLoading}) => {\r\n    return(\r\n<div>\r\n<div>\r\n    <div className=\"search-container\">\r\n      <input className=\"search-input\" type=\"text\" placeholder=\"Search by name..\" name=\"search\" value={searchText} onChange={changeHandle}/>\r\n      <i className=\"fa fa-search search-icon\"></i>\r\n    </div>\r\n  </div>\r\n{isLoading ? <Spinner className=\"spinner\" animation=\"grow\" /> : <Table striped bordered hover size=\"sm\">\r\n  <thead>\r\n    <tr>\r\n      <th>Id</th>\r\n      <th>Name</th>\r\n      <th>Email</th>\r\n      <th>Designation</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    {employeeData.map((data, i) => {\r\n        return(\r\n        <tr key={i}>\r\n        <td>{i+1}</td>\r\n        <td>{data.name}</td>\r\n        <td>{data.email}</td>\r\n        <td>{data.designation}</td>\r\n        </tr>\r\n    )\r\n    }) }\r\n  </tbody>\r\n</Table>}\r\n</div>\r\n    )\r\n}\r\n\r\nexport default List","import { employeeConstants } from '../helpers/constants';\r\nimport { userService } from '../services/userService';\r\n\r\nexport const employeeActions = {\r\n    fetchDetails\r\n};\r\n\r\nfunction fetchDetails() {\r\n    return dispatch => {\r\n        dispatch(request());\r\n        userService.fetchEmployees()\r\n            .then(\r\n                data => {\r\n                    dispatch(success(data.data));\r\n                },\r\n                error => {\r\n                    dispatch(failure(error));\r\n                    // dispatch(alertActions.error(error));\r\n                }\r\n            );\r\n    };\r\n\r\n    function request(user) { return { type: employeeConstants.REQUEST, user } }\r\n    function success(payload) { return { type: employeeConstants.SUCCESS, payload } }\r\n    function failure(error) { return { type: employeeConstants.FAILURE, error } }\r\n}","import React from 'react'\r\nimport { Navbar, Container, Form, Button } from 'react-bootstrap';\r\nimport { useDispatch } from 'react-redux';\r\nimport { userActions } from '../actions/userAction';\r\n\r\nconst NavBar = () => {\r\n  const dispatch = useDispatch();\r\n  const logoutHandle = e => {\r\n    e.preventDefault()\r\n    dispatch(userActions.logout())\r\n  }\r\n\r\n  return (\r\n    <Navbar expand=\"lg\" variant=\"light\" bg=\"light\">\r\n      <Container>\r\n        <Navbar.Brand href=\"#\">REACT APPLICATION</Navbar.Brand>\r\n      </Container>\r\n      <Form inline>\r\n        <Button variant=\"outline-info\" onClick={logoutHandle}>Logout</Button>\r\n      </Form>\r\n    </Navbar>\r\n  )\r\n}\r\n\r\nexport default NavBar","import React, { useEffect, useState, Fragment } from 'react';\r\nimport List from './employeeList';\r\nimport { employeeActions } from '../../actions/employeeAction';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport NavBar from '../../components/navbar';\r\n\r\nconst Home = () => {\r\n    const dispatch = useDispatch();\r\n    const employeeReducer = useSelector(state => state.employee);\r\n    const [employeeData, setEmployeeData] = useState([])\r\n    const [searchText, setSearchText] = useState('')\r\n\r\n    useEffect(() => {\r\n        dispatch(employeeActions.fetchDetails())\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        setEmployeeData(employeeReducer.employees)\r\n    },[employeeReducer])\r\n\r\n    const changeHandle = e => {\r\n        setSearchText(e.target.value)\r\n        const filter = employeeReducer.employees.filter(data => {\r\n            return data.name.toLowerCase().search(e.target.value.toLowerCase()) !== -1\r\n        })\r\n        setEmployeeData(filter)\r\n    }\r\n\r\n    return(\r\n        <Fragment>\r\n        <NavBar />\r\n        <List employeeData = {employeeData} employeeReducer={employeeReducer} changeHandle={changeHandle} searchText={searchText} isLoading={employeeReducer.isLoading}/>\r\n        </Fragment>\r\n    )\r\n}\r\nexport default Home","import React from 'react';\r\nimport { Alert } from 'react-bootstrap';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { alertActions } from '../actions/alertAction'\r\nconst AlertMessage = () => {\r\n    const dispatch = useDispatch();\r\n    const alertReducer = useSelector(state => state.alert);\r\n    const clearAlert = () => {\r\n        setTimeout(() => {\r\n            dispatch(alertActions.alertClear())\r\n        }, 3000);\r\n    }\r\n    return(\r\n        <div className=\"alert-wrap\">\r\n            {alertReducer.message && <Alert variant={alertReducer.type}>\r\n            {alertReducer.message}\r\n             </Alert>}\r\n             {alertReducer.message && clearAlert()}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AlertMessage","import React from 'react';\nimport './App.css';\nimport { Router, Switch, Redirect } from 'react-router-dom';\nimport { history } from './helpers/history';\nimport PublicRoute from './route/public-route';\nimport PrivateRoute from './route/private-route';\nimport SignUp from './pages/signup';\nimport Login from './pages/login';\nimport Home from './pages/home';\nimport AlertMessage from './components/alert'\nfunction App() {\n  return (\n    <div className=\"App\">\n        <AlertMessage />\n        <Router history={history}>\n        <Switch>\n          <Redirect exact from=\"/\" to=\"login\" />\n          <PublicRoute path=\"/login\" component={Login} />\n          <PublicRoute path=\"/signup\" component={SignUp} />\n          <PrivateRoute path=\"/home\" component={Home} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import { userConstants } from '../helpers/constants';\r\n\r\nconst initialState = {isLoading: false}\r\n\r\nexport function user(state = initialState, action) {\r\n    switch (action.type) {\r\n    case userConstants.LOGIN_REQUEST:\r\n        return {\r\n        isLoading: true,\r\n        };\r\n    case userConstants.LOGIN_SUCCESS:\r\n        return {\r\n        isLoading: false\r\n        };\r\n    case userConstants.LOGIN_FAILURE:\r\n        return {\r\n        isLoading: false\r\n        };\r\n    case userConstants.SIGNUP_REQUEST:\r\n        return {\r\n        isLoading: true\r\n        };\r\n    case userConstants.SIGNUP_SUCCESS:\r\n        return {\r\n        isLoading: false\r\n        };\r\n    case userConstants.SIGNUP_FAILURE:\r\n        return {\r\n        isLoading: false\r\n        };\r\n    default:\r\n        return state\r\n    }\r\n}","import { employeeConstants } from '../helpers/constants';\r\n\r\nconst initialState = {isLoading: false, employees: []}\r\n\r\nexport function employee(state = initialState, action) {\r\n    switch (action.type) {\r\n    case employeeConstants.REQUEST:\r\n        return {\r\n        ...state,\r\n        isLoading: true,\r\n        };\r\n    case employeeConstants.SUCCESS:\r\n        return {\r\n        ...state,\r\n        isLoading: false,\r\n        employees: action.payload\r\n        };\r\n    case employeeConstants.FAILURE:\r\n        return {\r\n        ...state,\r\n        isLoading: false\r\n        };\r\n    default:\r\n        return state\r\n    }\r\n}","import { combineReducers } from \"redux\";\r\nimport { alert } from './alertReducer';\r\nimport { user } from './userReducer';\r\nimport { employee } from './employeeReducer'\r\nexport default combineReducers({\r\n  alert,\r\n  user,\r\n  employee\r\n});","import { alertConstants } from '../helpers/constants';\r\n\r\nexport function alert(state = {}, action) {\r\n    switch (action.type) {\r\n    case alertConstants.SUCCESS:\r\n        return {\r\n        type: 'success',\r\n        message: action.message\r\n        };\r\n    case alertConstants.ERROR:\r\n        return {\r\n        type: 'danger',\r\n        message: action.message\r\n        };\r\n    case alertConstants.CLEAR:\r\n        return {};\r\n    default:\r\n        return state\r\n    }\r\n}","import { createStore, applyMiddleware } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport { createLogger } from 'redux-logger';\r\nimport rootReducer from '../reducers';\r\n\r\nconst loggerMiddleware = createLogger();\r\n\r\nexport const store = createStore(\r\n    rootReducer,\r\n    applyMiddleware(\r\n        thunkMiddleware,\r\n        loggerMiddleware\r\n    )\r\n);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { store } from './store/index';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n     <Provider store={store}>\n    <App />\n     </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}